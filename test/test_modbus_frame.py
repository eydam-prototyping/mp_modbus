import unittest
import mp_modbus_frame

class Test(unittest.TestCase):
    def test_modbus_rtu_frame_init(self):
        test_list = [{
            "params": {"fr_type":"request", "func_code":1, "device_addr":1, "register":18, "length":8},
            "frame": bytearray([0x01, 0x01, 0x00, 0x12, 0x00, 0x08, 0x9d, 0xc9])
        },{
            "params": {"fr_type":"request", "func_code":2, "device_addr":1, "register":18, "length":8},
            "frame": bytearray([0x01, 0x02, 0x00, 0x12, 0x00, 0x08, 0xd9, 0xc9])
        },{
            "params": {"fr_type":"request", "func_code":3, "device_addr":1, "register":18, "length":8},
            "frame": bytearray([0x01, 0x03, 0x00, 0x12, 0x00, 0x08, 0xe4, 0x09])
        },{
            "params": {"fr_type":"request", "func_code":4, "device_addr":1, "register":18, "length":8},
            "frame": bytearray([0x01, 0x04, 0x00, 0x12, 0x00, 0x08, 0x51, 0xc9])
        },{
            "params": {"fr_type":"request", "func_code":5, "device_addr":1, "register":18, "data":bytearray([0xFF, 0x00])},
            "frame": bytearray([0x01, 0x05, 0x00, 0x12, 0xff, 0x00, 0x2c, 0x3f]),
        },{
            "params": {"fr_type":"request", "func_code":6, "device_addr":1, "register":18, "data":bytearray([0x00, 0x01])},
            "frame": bytearray([0x01, 0x06, 0x00, 0x12, 0x00, 0x01, 0xe8, 0x0f]),
        },{
            "params": {"fr_type":"request", "func_code":15, "device_addr":1, "register":18, "length":8, "data":bytearray([0xFF])},
            "frame": bytearray([0x01, 0x0f, 0x00, 0x12, 0x00, 0x08, 0x01, 0xff, 0x06, 0xd6]),
        },{
            "params": {"fr_type":"request", "func_code":16, "device_addr":1, "register":18, "length":8, "data":bytearray([0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01])},
            "frame": bytearray([0x01, 0x10, 0x00, 0x12, 0x00, 0x08, 0x10, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0xd5, 0x51]),
        },{
            "params": {"fr_type":"response", "func_code":1, "device_addr":1, "data":bytearray([0xFF])},
            "frame": bytearray([0x01, 0x01, 0x01, 0xff, 0x11, 0xc8])
        },{
            "params": {"fr_type":"response", "func_code":2, "device_addr":1, "data":bytearray([0xFF])},
            "frame": bytearray([0x01, 0x02, 0x01, 0xff, 0xe1, 0xc8])
        },{
            "params": {"fr_type":"response", "func_code":3, "device_addr":1, "data":bytearray([0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01])},
            "frame": bytearray([0x01, 0x03, 0x10, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x93, 0xb4])
        },{
            "params": {"fr_type":"response", "func_code":4, "device_addr":1, "data":bytearray([0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01])},
            "frame": bytearray([0x01, 0x04, 0x10, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x22, 0xc1])
        },{
            "params": {"fr_type":"response", "func_code":5, "device_addr":1, "register":18, "data":bytearray([0xFF, 0x00])},
            "frame": bytearray([0x01, 0x05, 0x00, 0x12, 0xff, 0x00, 0x2c, 0x3f])
        },{
            "params": {"fr_type":"response", "func_code":6, "device_addr":1, "register":18, "data":bytearray([0x00, 0x01])},
            "frame": bytearray([0x01, 0x06, 0x00, 0x12, 0x00, 0x01, 0xe8, 0x0f])
        },{
            "params": {"fr_type":"response", "func_code":15, "device_addr":1, "register":18, "length":8},
            "frame": bytearray([0x01, 0x0f, 0x00, 0x12, 0x00, 0x08, 0xf4, 0x08])
        },{
            "params": {"fr_type":"response", "func_code":16, "device_addr":1, "register":18, "length":8},
            "frame": bytearray([0x01, 0x10, 0x00, 0x12, 0x00, 0x08, 0x61, 0xca])
        }]

        for test in test_list:
            f = mp_modbus_frame.modbus_rtu_frame(**test["params"])
            self.assertEqual(f.get_frame(), test["frame"])

            parsed_frame = mp_modbus_frame.modbus_rtu_frame.parse_frame(test["frame"])
            self.assertEqual(f.get_frame(), parsed_frame.get_frame())               

    def test_modbus_tcp_frame_init(self):
        test_list = [{
            "params": {"transaction_id": 1, "fr_type":"request", "func_code":1, "unit_id":1, "register":18, "length":8},
            "frame": bytearray([0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x01, 0x01, 0x00, 0x12, 0x00, 0x08])
        },{
            "params": {"transaction_id": 1, "fr_type":"request", "func_code":2, "unit_id":1, "register":18, "length":8},
            "frame": bytearray([0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x01, 0x02, 0x00, 0x12, 0x00, 0x08])
        },{
            "params": {"transaction_id": 1, "fr_type":"request", "func_code":3, "unit_id":1, "register":18, "length":8},
            "frame": bytearray([0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x01, 0x03, 0x00, 0x12, 0x00, 0x08])
        },{
            "params": {"transaction_id": 1, "fr_type":"request", "func_code":4, "unit_id":1, "register":18, "length":8},
            "frame": bytearray([0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x01, 0x04, 0x00, 0x12, 0x00, 0x08])
        },{
            "params": {"transaction_id": 1, "fr_type":"request", "func_code":5, "unit_id":1, "register":18, "data":bytearray([0xFF, 0x00])},
            "frame": bytearray([0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x01, 0x05, 0x00, 0x12, 0xff, 0x00]),
        },{
            "params": {"transaction_id": 1, "fr_type":"request", "func_code":6, "unit_id":1, "register":18, "data":bytearray([0x00, 0x01])},
            "frame": bytearray([0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x01, 0x06, 0x00, 0x12, 0x00, 0x01]),
        },{
            "params": {"transaction_id": 1, "fr_type":"request", "func_code":15, "unit_id":1, "register":18, "length":8, "data":bytearray([0xFF])},
            "frame": bytearray([0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x01, 0x0f, 0x00, 0x12, 0x00, 0x08, 0x01, 0xff]),
        },{
            "params": {"transaction_id": 1, "fr_type":"request", "func_code":16, "unit_id":1, "register":18, "length":8, "data":bytearray([0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01])},
            "frame": bytearray([0x00, 0x01, 0x00, 0x00, 0x00, 0x17, 0x01, 0x10, 0x00, 0x12, 0x00, 0x08, 0x10, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01]),
        },{
            "params": {"transaction_id": 1, "fr_type":"response", "func_code":1, "unit_id":1, "data":bytearray([0xFF])},
            "frame": bytearray([0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x01, 0x01, 0x01, 0xff])
        },{
            "params": {"transaction_id": 1, "fr_type":"response", "func_code":2, "unit_id":1, "data":bytearray([0xFF])},
            "frame": bytearray([0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x01, 0x02, 0x01, 0xff])
        },{
            "params": {"transaction_id": 1, "fr_type":"response", "func_code":3, "unit_id":1, "data":bytearray([0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01])},
            "frame": bytearray([0x00, 0x01, 0x00, 0x00, 0x00, 0x13, 0x01, 0x03, 0x10, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01])
        },{
            "params": {"transaction_id": 1, "fr_type":"response", "func_code":4, "unit_id":1, "data":bytearray([0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01])},
            "frame": bytearray([0x00, 0x01, 0x00, 0x00, 0x00, 0x13, 0x01, 0x04, 0x10, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01])
        },{
            "params": {"transaction_id": 1, "fr_type":"response", "func_code":5, "unit_id":1, "register":18, "data":bytearray([0xFF, 0x00])},
            "frame": bytearray([0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x01, 0x05, 0x00, 0x12, 0xff, 0x00])
        },{
            "params": {"transaction_id": 1, "fr_type":"response", "func_code":6, "unit_id":1, "register":18, "data":bytearray([0x00, 0x01])},
            "frame": bytearray([0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x01, 0x06, 0x00, 0x12, 0x00, 0x01])
        },{
            "params": {"transaction_id": 1, "fr_type":"response", "func_code":15, "unit_id":1, "register":18, "length":8},
            "frame": bytearray([0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x01, 0x0f, 0x00, 0x12, 0x00, 0x08])
        },{
            "params": {"transaction_id": 1, "fr_type":"response", "func_code":16, "unit_id":1, "register":18, "length":8},
            "frame": bytearray([0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x01, 0x10, 0x00, 0x12, 0x00, 0x08])
        },{
            "params": {"transaction_id": 1, "fr_type":"response", "func_code":0x81, "unit_id":1, "error_code": 0x01},
            "frame": bytearray([0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x01, 0x81, 0x01])
        }]

        for test in test_list:
            f = mp_modbus_frame.modbus_tcp_frame(**test["params"])
            self.assertEqual(f.get_frame(), test["frame"])
            
            parsed_frame = mp_modbus_frame.modbus_tcp_frame.parse_frame(test["frame"])
            self.assertEqual(f.get_frame(), parsed_frame.get_frame())   